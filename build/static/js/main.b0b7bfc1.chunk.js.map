{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["monday","mondaySdk","errorMessages","default","text","explanation","unauthorized","bad_request","no_org_slug","form_not_filled","no_results","workflow_not_found","project_not_found","possibleErrors","badgeIcons","canceled","failed","success","App","props","state","settings","name","errorMessageEnabled","errorMessage","errorExplanation","projects","errorFlipped","flipCard","bind","selectProject","saveSelectedProject","selectWorkflow","saveSelectedWorkflow","displayMessage","listen","res","setState","data","e","preventDefault","this","prevState","selectedProject","selectedWorkflow","enabled","message","from_list","vcs_provider","organization_name","length","project_name","workflow_name","prevProps","settingsComplete","fetch","circleci_api_token","headers","then","status","json","items","pipelines","pipeline","getWorkflow","catch","console","log","id","item","project_slug","push","className","React","Component","ErrorMessage","options","max","isFlipped","onClick","alt","src","StatusBadge","getStatus","project","undefined","workflow","find","Badge","onMouseLeave","icon","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b0b7bfc1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport MaterialIcon from 'material-icons-react';\nimport Tilt from 'react-tilt';\nimport ReactCardFlip from 'react-card-flip';\nimport mondaySdk from \"monday-sdk-js\";\nconst monday = mondaySdk();\n\nconst errorMessages = {\n    default: {text: \"Something went wrong, please check the logs\", explanation: \"\"},\n    unauthorized: {text: \"You are unauthorized. Please enter a valid CircleCI API token.\", explanation: \"Go to CircleCI and log in. Then click on your profile on the bottom left and go to \\\"Personal API Tokens\\\". Create a new API Token and enter it here at \\\"CircleCI API token\\\" in the settings.\"},\n    bad_request: {text: \"Error 400: Bad request\", explanation: \"\"},\n    no_org_slug: {text: \"Please enter your VCS provider. This can be GitHub or BitBucket\", explanation: \"\"},\n    form_not_filled: {text: \"Please fill in all fields\", explanation: \"Click the cog icon and fill in all fields to get started.\"},\n    no_results: {text: \"The server returned no results.\", explanation: \"Did you fill in all values correctly? A possible reason for this error could be that you entered the wrong VCS provider.\"},\n    workflow_not_found: {text: \"This workflow could not be found. Please check the name.\", explanation: \"\"},\n    project_not_found: {text: \"This project could not be found. Please check the name.\", explanation: \"\"}\n};\n\nconst possibleErrors = {\n    \"You must log in first.\": \"You are unauthorized. Please enter a valid CircleCI API token.\",\n    \"Organization not found\": \"Organization not found. Please check your organization name.\"\n};\n\nconst badgeIcons = {\n    canceled: \"remove_circle_outline\",\n    failed: \"error_outline\",\n    success: \"check_circle_outline\"\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            settings: {},\n            name: \"\",\n            errorMessageEnabled: false,\n            errorMessage: \"\",\n            errorExplanation: \"\",\n            projects: {},\n            errorFlipped: false\n        };\n\n        this.flipCard = this.flipCard.bind(this);\n        this.selectProject = this.selectProject.bind(this);\n        this.saveSelectedProject = this.saveSelectedProject.bind(this);\n        this.selectWorkflow = this.selectWorkflow.bind(this);\n        this.saveSelectedWorkflow = this.saveSelectedWorkflow.bind(this);\n        this.displayMessage = this.displayMessage.bind(this);\n    }\n\n    componentDidMount() {\n        monday.listen(\"settings\", res => {\n            this.setState({settings: res.data});\n        });\n    }\n\n    flipCard(e) {\n        e.preventDefault();\n        this.setState(prevState => ({ errorFlipped: !prevState.errorFlipped }));\n    }\n\n    selectProject(selectedProject) {\n        if(this.state.selectedProject !== selectedProject) {\n            this.setState({ selectedProject: selectedProject });\n        } else {\n            this.setState({ selectedProject: \"\" });\n        }\n    }\n\n    saveSelectedProject(saveSelectedProject) {\n        this.setState({ saveSelectedProject: saveSelectedProject });\n    }\n\n    selectWorkflow(selectedWorkflow) {\n        if(this.state.selectedWorkflow !== selectedWorkflow) {\n            this.setState({ selectedWorkflow: selectedWorkflow });\n        } else {\n            this.setState({ selectedWorkflow: \"\" });\n        }\n    }\n\n    saveSelectedWorkflow(saveSelectedWorkflow) {\n        this.setState({ saveSelectedWorkflow: saveSelectedWorkflow });\n    }\n\n    displayMessage(enabled, message=\"default\", from_list=true) {\n        if(from_list) {\n            this.setState({errorMessageEnabled: enabled, errorMessage: errorMessages[message]['text'], errorExplanation: errorMessages[message]['explanation']});\n        } else {\n            this.setState({errorMessageEnabled: enabled, errorMessage: message, errorExplanation: \"\"});\n        }\n    }\n\n    settingsComplete() {\n        if(this.state.settings.vcs_provider === null || this.state.settings.organization_name.length === 0 || this.state.settings.project_name.length === 0 || this.state.settings.workflow_name.length === 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevState.settings !== this.state.settings) {\n            if(this.settingsComplete()) {\n                fetch(\"https://circleci.com/api/v2/pipeline?circle-token=\"+this.state.settings.circleci_api_token+\"&org-slug=\"+this.state.settings.vcs_provider+\"/\"+this.state.settings.organization_name, {\n                    headers: {\n                        'Accept': 'application/json'\n                    }\n                })\n                    .then(res => {\n                        if(res.status === 401) {\n                            this.displayMessage(true, \"unauthorized\");\n                        }\n                        return res.json();\n                    })\n                    .then((data) => {\n                        if(data.message in possibleErrors) {\n                            this.displayMessage(true, possibleErrors[data.message], false);\n                        } else {\n                            if(data.items.length > 0) {\n                                var pipelines = data.items;\n                                this.setState({ projects: [] });\n                                for(var pipeline in pipelines) {\n                                    this.getWorkflow(pipelines[pipeline]);\n                                }\n                                this.displayMessage(false);\n                            } else {\n                                this.displayMessage(true, \"no_results\");\n                            }\n                        }\n                    })\n                    .catch(console.log);\n            } else {\n                this.displayMessage(true, \"form_not_filled\");\n            }\n        }\n    }\n\n    getWorkflow(pipeline) {\n        fetch(\"https://circleci.com/api/v2/pipeline/\"+pipeline.id+\"/workflow?circle-token=\"+this.state.settings.circleci_api_token+\"&org-slug=\"+this.state.settings.vcs_provider+\"/\"+this.state.settings.organization_name, {\n            headers: {\n                'Accept': 'application/json'\n            }\n        })\n            .then(res => {\n                return res.json();\n            })\n            .then((data) => {\n                var projects = this.state.projects;\n                if(!projects[pipeline.project_slug]) {\n                    projects[pipeline.project_slug] = [];\n                }\n                for(var item in data.items) {\n                    projects[pipeline.project_slug].push(data.items[item]);\n                }\n                this.setState({projects: projects});\n            })\n            .catch(console.log);\n    }\n\n    render() {\n        if(this.state.errorMessageEnabled) {\n            return <div className=\"App\"><ErrorMessage message={this.state.errorMessage} explanation={this.state.errorExplanation} errorFlipped={this.state.errorFlipped} flipCard={this.flipCard}/></div>;\n        } else {\n            return <div className=\"app\"><StatusBadge settings={this.state.settings} projects={this.state.projects} /></div>;\n        }\n    };\n}\n\nclass ErrorMessage extends React.Component {\n    render() {\n        return <Tilt className=\"Tilt Tilt-error\" options={{ max: 20 }}>\n            <ReactCardFlip isFlipped={this.props.errorFlipped && this.props.explanation.length > 0}>\n            <div onClick={this.props.flipCard} className=\"error_message_wrapper\">\n            <p className=\"error_message_title\">Error</p>\n            <p className=\"error_message_message\">{this.props.message}</p>\n            <img alt=\"Error\" className=\"error_message_exclamation_mark\" src=\"/exclamation_mark.png\" />\n            </div>\n            <div onClick={this.props.flipCard} className=\"error_message_wrapper\">\n            <p className=\"error_explanation\">{this.props.explanation}</p>\n            </div>\n            </ReactCardFlip>\n            </Tilt>;\n    }\n}\n\nclass StatusBadge extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            status: \"\",\n            errorMessageEnabled: false,\n            errorMessage: \"\",\n            errorExplanation: \"\"\n        };\n\n        this.displayMessage = this.displayMessage.bind(this);\n        this.getStatus = this.getStatus.bind(this);\n    }\n\n    componentDidMount() {\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this.getStatus(prevProps, prevState);\n    }\n\n    displayMessage(enabled, message=\"default\", from_list=true) {\n        if(from_list) {\n            this.setState({errorMessageEnabled: enabled, errorMessage: errorMessages[message]['text'], errorExplanation: errorMessages[message]['explanation']});\n        } else {\n            this.setState({errorMessageEnabled: enabled, errorMessage: message});\n        }\n    }\n\n    getStatus(prevProps, prevState) {\n        var project_slug = this.props.settings.vcs_provider + \"/\" + this.props.settings.organization_name + \"/\" + this.props.settings.project_name;\n        var project = this.props.projects[project_slug];\n        if(project === undefined) {\n            if(prevProps.settings !== this.props.settings) {\n                this.displayMessage(true, \"project_not_found\");\n            }\n            return;\n        } else {\n            var workflow = project.find(workflow => workflow.name === this.props.settings.workflow_name);\n            if(workflow === undefined) {\n                if(prevProps.settings !== this.props.settings) {\n                    this.displayMessage(true, \"workflow_not_found\");\n                }\n            } else {\n                if(this.state.errorMessageEnabled) {\n                    this.displayMessage(false);\n                }\n                if(this.state.status !== workflow.status) {\n                    this.setState({ status: workflow.status });\n                }\n            }\n        }\n    }\n\n    render() {\n        if(this.state.errorMessageEnabled) {\n            return <div className=\"App\"><ErrorMessage message={this.state.errorMessage} explanation={this.state.errorExplanation} errorFlipped={this.state.errorFlipped} flipCard={this.flipCard}/></div>;\n        } else {\n            return <div className=\"App\"><Badge project={this.props.settings.project_name} workflow={this.props.settings.workflow_name} status={this.state.status} /></div>;\n        }\n    }\n}\n\nclass Badge extends React.Component {\n    render() {\n        return <Tilt className=\"Tilt Tilt-status\" options={{ max : 25 }} onMouseLeave={this.onMouseLeave}>\n            <p className=\"status_badge_title\">{this.props.project}</p>\n            <p className=\"status_badge_subtitle\">{this.props.workflow}</p>\n            <div className={\"Tilt-inner status_badge_wrapper status_\" + this.props.status}>\n            <div className=\"status_badge_icon\"><MaterialIcon icon={badgeIcons[this.props.status]} color=\"#FFF\" /></div><p className=\"status_badge_text\">{this.props.status}</p>\n            </div>\n            </Tilt>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}